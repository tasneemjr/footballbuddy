// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  players     Player[]
  matchesHome Match[]  @relation("HomeTeam")
  matchesAway Match[]  @relation("AwayTeam")

  @@map("teams")
}

model Player {
  id     String  @id @default(cuid())
  name   String
  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String? @map("teamId")
  stats  Json?

  @@map("players")
}

model Match {
  id         String    @id @default(cuid())
  date       DateTime
  homeTeam   Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId String    @map("homeTeamId")
  awayTeam   Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId String    @map("awayTeamId")
  preview    Preview?
  review     Review?
  liveBlog   LiveBlog?

  @@map("matches")
}

model Preview {
  id      String @id @default(cuid())
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String @unique @map("matchId")
  content String

  @@map("previews")
}

model Review {
  id      String @id @default(cuid())
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String @unique @map("matchId")
  content String

  @@map("reviews")
}

model Poll {
  id        String         @id @default(cuid())
  question  String
  options   String[]
  responses UserResponse[]

  @@map("polls")
}

model UserResponse {
  id     String @id @default(cuid())
  poll   Poll   @relation(fields: [pollId], references: [id])
  pollId String @map("pollId")
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("userId")
  answer String

  @@map("userresponses")
}

model LiveBlog {
  id      String @id @default(cuid())
  match   Match  @relation(fields: [matchId], references: [id])
  matchId String @unique @map("matchId")
  entries Json // Array of live updates

  @@map("liveblogs")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String
  role           String          @default("user")
  accounts       Account[]
  sessions       Session[]
  communityPosts CommunityPost[]
  comments       Comment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  responses      UserResponse[]
  posts          Post[]          @relation("UserPosts")

  @@map("users")
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  slug      String    @unique
  image     String?
  category  String
  published Boolean   @default(false)
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId  String    @map("authorId")
  comments  Comment[] @relation("PostComments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("posts")
}

model CommunityPost {
  id       String    @id @default(cuid())
  title    String
  content  String
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @map("userId")
  comments Comment[] @relation("CommunityPostComments")

  @@map("communityposts")
}

model Comment {
  id      String  @id @default(cuid())
  content String
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @map("userId")

  // For blog posts
  post   Post?   @relation("PostComments", fields: [postId], references: [id])
  postId String? @map("postId")

  // For community posts
  communityPost   CommunityPost? @relation("CommunityPostComments", fields: [communityPostId], references: [id])
  communityPostId String? @map("communityPostId")

  @@map("comments")
}
